group = "com.github.DragonsQC"
apply plugin: "com.android.library"
apply plugin: "com.github.dcendents.android-maven"//Jitpack

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    compileOptions.encoding = "UTF-8"

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    packagingOptions {
        exclude "META-INF/DEPENDENCIES"
        exclude "META-INF/LICENSE"
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/license.txt"
        exclude "META-INF/NOTICE"
        exclude "META-INF/NOTICE.txt"
        exclude "META-INF/notice.txt"
        exclude "META-INF/ASL2.0"
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation  fileTree(dir: "libs", include: ["*.jar"])
//【Android Support】*******************************************************************************
    implementation  rootProject.ext.support["support-v4"]
    implementation  rootProject.ext.support["appcompat"]
    implementation  rootProject.ext.support["palette"]
    implementation  rootProject.ext.support["annotation"]
    implementation  rootProject.ext.support["recyclerview"]
    implementation  rootProject.ext.support["cardview"]
    implementation  rootProject.ext.support["constraintlayout"]
    implementation  rootProject.ext.support["material"]

    implementation  rootProject.ext.support["lifecycle-compiler"]
    annotationProcessor rootProject.ext.support["lifecycle-compiler"]
    implementation  rootProject.ext.support["lifecycle-extensions"]

    implementation  rootProject.ext.dependencies["rxlifecycle"]
    implementation  rootProject.ext.dependencies["rxlifecycle-components"]

    implementation  rootProject.ext.dependencies["rxjava"]
    implementation  rootProject.ext.dependencies["rxandroid"]

//【Utils】*****************************************************************************************
    implementation  rootProject.ext.dependencies["commons-lang3"]
    implementation  rootProject.ext.dependencies["xlog"]
    implementation  rootProject.ext.dependencies["xutils"]
    implementation (rootProject.ext.dependencies["StatusBarCompat"]) {
        exclude group: 'com.android.support'
    }
    implementation  rootProject.ext.dependencies["parallaxbacklayout"]

//【HTTP】******************************************************************************************
    implementation  rootProject.ext.dependencies["retrofit"]
    implementation  rootProject.ext.dependencies["converter-gson"]
    implementation  rootProject.ext.dependencies["logging-interceptor"]
    implementation  rootProject.ext.dependencies["fastjson"]

//【图片加载】***************************************************************************************
    implementation  rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]

//【Animation】*************************************************************************************
    implementation  rootProject.ext.dependencies["easing"]
    implementation  rootProject.ext.dependencies["androidanimations"]

//【Widget】****************************************************************************************
    implementation  rootProject.ext.dependencies["circleimageview"]
    implementation  rootProject.ext.dependencies["Android-Bootstrap"]
    implementation  rootProject.ext.dependencies["kenburnsview"]
    implementation (rootProject.ext.dependencies["advrecyclerview"]) {
        transitive = true
    }

//【Other】*****************************************************************************************

}
repositories {
    jcenter()
    google()
    mavenLocal()
//    mavenCentral()
//    maven { url "https://jcenter.bintray.com" }
    maven { url "https://jitpack.io" }
//    maven { url "https://maven.google.com" }
}

//def siteUrl = "https://github.com/DragonsQC"
//def gitUrl = "https://github.com/DragonsQC/QLibrary.git"
//install {
//    repositories.mavenInstaller {
//        // This generates POM.xml with proper parameters
//        pom {
//            project {
//                packaging "aar"
//                // 项目描述
//                name "Qlibrary"
//                url siteUrl
//                // Set your license
//                licenses {
//                    license {
//                        name "The Apache Software License, Version 2.0"
//                        url "http://www.apache.org/licenses/LICENSE-2.0.txt"
//                    }
//                }
//                developers {
//                    developer { //开发者基本信息
//                        id "DragonsQC"
//                        name "DragonsQC"
//                        email "tkzl@vip.qq.com"
//                    }
//                }
//                scm {
//                    connection gitUrl
//                    developerConnection gitUrl
//                    url siteUrl
//                }
//            }
//        }
//    }
//}

// 指定编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// 打包源码
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = "sources"
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// 制作文档(Javadoc)
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}